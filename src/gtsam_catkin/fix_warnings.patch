diff --git a/gtsam/inference/Key.h b/gtsam/inference/Key.h
index 2c3eb84c6..a0ba7beee 100644
--- a/gtsam/inference/Key.h
+++ b/gtsam/inference/Key.h
@@ -84,7 +84,7 @@ struct traits<Key> {
   static void Print(const Key& val, const std::string& str = "") {
     PrintKey(val, str);
   }
-  static bool Equals(const Key& val1, const Key& val2, double tol = 1e-8) {
+  static bool Equals(const Key& val1, const Key& val2, double /*tol*/ = 1e-8) {
     return val1 == val2;
   }
 };
diff --git a/gtsam/linear/NoiseModel.h b/gtsam/linear/NoiseModel.h
index e495921c2..1806be7f0 100644
--- a/gtsam/linear/NoiseModel.h
+++ b/gtsam/linear/NoiseModel.h
@@ -676,7 +676,7 @@ namespace gtsam {
          * evaluating the total penalty. But for now, I'm leaving this residual method as pure
          * virtual, so the existing mEstimators can inherit this default fallback behavior.
          */
-        virtual double residual(double error) const { return 0; };
+        virtual double residual(double /*error*/) const { return 0; };
 
         /*
          * This method is responsible for returning the weight function for a given amount of error.
diff --git a/gtsam/nonlinear/internal/ExpressionNode.h b/gtsam/nonlinear/internal/ExpressionNode.h
index d11908b54..ecc590968 100644
--- a/gtsam/nonlinear/internal/ExpressionNode.h
+++ b/gtsam/nonlinear/internal/ExpressionNode.h
@@ -97,7 +97,7 @@ public:
   }
 
   /// Return dimensions for each argument, as a map
-  virtual void dims(std::map<Key, int>& map) const {
+  virtual void dims(std::map<Key, int>& /*map*/) const {
   }
 
   // Return size needed for memory buffer in traceExecution
@@ -140,13 +140,13 @@ public:
   }
 
   /// Return value
-  virtual T value(const Values& values) const {
+  virtual T value(const Values& /*values*/) const {
     return constant_;
   }
 
   /// Construct an execution trace for reverse AD
-  virtual T traceExecution(const Values& values, ExecutionTrace<T>& trace,
-      ExecutionTraceStorage* traceStorage) const {
+  virtual T traceExecution(const Values& /*values*/, ExecutionTrace<T>& /*trace*/,
+      ExecutionTraceStorage* /*traceStorage*/) const {
     return constant_;
   }
 };
@@ -197,7 +197,7 @@ public:
 
   /// Construct an execution trace for reverse AD
   virtual T traceExecution(const Values& values, ExecutionTrace<T>& trace,
-      ExecutionTraceStorage* traceStorage) const {
+      ExecutionTraceStorage* /*traceStorage*/) const {
     trace.setLeaf(key_);
     return values.at<T>(key_);
   }
